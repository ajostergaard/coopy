
To build, use CMake (if you have cmake, you can just run ./autogen.sh).
+ http://www.cmake.org

An example for Linux:
  mkdir build
  cd build
  cmake ..
  make
See optional flags that require extra libraries in ccmake/cmake-gui.

To then make python/ruby bindings, first install the development 
libraries for the language of interest (a -dev package). 
Then set Coopy_DIR to the main build directory, and Coopy_ROOT to the 
source directory, and do something like:
  cd $Coopy_ROOT
  mkdir -p build/python
  cd build/python
  cmake -DCREATE_PYTHON=TRUE ../../bindings
  make
  python example.py

========================================================================

To include Gnumeric support, a few more steps are needed.

How to compile:

* Install gnumeric (ideally through your package manager)
  - easy on Linux
  - on MacOSX, homebrew works
  - on Windows, see jhbuild scripts for windows build in gnumeric source.
    (more details below)
* Install gnumeric source (ideally through your package manager)
* Run "./configure" on your gnumeric source, do anything it needs
  you to do in order to get configured (e.g. installing extra -dev
  packages).  E.g. on Debian, I needed:
    intltool
    libglade2-dev libgtk2.0-dev
    libgoffice-0.8-dev libgsf-1-dev
  You'd need more to compile gnumeric completely, but we're not doing that.
* In the "src" subdirectory of gnumeric source, do 
  "make gnumeric-paths.h".  If having trouble, see next step.
* You may need to take other steps to bring all header files into
  existence.  If you're having trouble, just do "make" in the
  gnumeric source directory.
* When compiling Coopy, turn on "GNUMERIC" flag in ccmake/cmake-gui
* Give path to Gnumeric source in "GNUMERIC_ROOT" in ccmake/cmake-gui

E.g. on Debian:
  apt-get install gnumeric
  apt-get build-dep gnumeric
  apt-get source gnumeric
  cd gnumeric-*
  ./configure
  # success! a lot of trouble to go to, given that we won't in fact
  # be compiling the source...
  cd src
  make gnumeric-paths.h
  # Success! We now have all the header files needed.
  # The "../gnumeric-N.N.N" directory will be GNUMERIC_ROOT in coopy ccmake

========================================================================

Compiling optional gnumeric dependency for Windows - this is not for
the faint of heart!

* Learn about cross-compiling
* Get gnumeric source code 1.10.16 on a Linux machine
* ./configure
* Install jhbuild
* Go to: gnumeric/tools/win32
* Do:
    make release

# may need to add the "mv" line as below in "build" script:
(
  download 'http://go.microsoft.com/fwlink/?LinkId=14188' 
  mv ${archive_dir}/index* ${archive_dir}/htmlhelp.exe
)

# patches directory missing in tarballs, get from git
   git clone --depth 1 git://git.gnome.org/gnumeric
   get gnumeric/tools/win32/patches

# zlib 1.2.5 gone from site, modify moduleset to replace:
    www.zlib.net
  with
    http://sourceforge.net/projects/libpng/files/zlib/1.2.5/

# glib won't accept new libtool versions on the host - if it 
  complains, hack autogen.sh in release/src/glib*:
    set 2.2*) to 2.*) in have_libtool test

# moduleset:
    ftp://ftp.simplesystems.org/pub/libpng/png/src/
  becomes
    ftp://ftp.simplesystems.org/pub/libpng/png/src/history/libpng12/

# moduleset:
    module="pixman-0.17.2.tar.gz"
    version="0.17.2"
  becomes:
    module="pixman-0.18.0.tar.gz"
    version="0.18.0"

# moduleset - specify versions of goffice and gnumeric
    <autotools id="goffice">
	<branch tag="GOFFICE_0_8_16"/>
    <autotools id="gnumeric">
	<branch tag="GNUMERIC_1_10_16"/>

# if gnumeric fails to install because of documentation problem:
    tools/win32/release/src/gnumeric/doc/C/chm$ touch gnumeric.chm

Once tools/win32/release/deploy/bin/gnumeric.exe exists, you are done.
Turn on USE_GNUMERIC in coopy
Set the GNUMERIC_ROOT in coopy to:
    ../tools/win32/release/deploy
Cross-compile coopy (see scripts/make_packages.sh mingw for tips)

You may need to force pkgconfig to look at gnumeric's libraries:
  PKG_CONFIG_PATH=/home/paulfitz/cvs/gnumeric/gnumeric-1.10.16/tools/win32/release/deploy/lib/pkgconfig/ cmake .

When testing binaries, you'll need to get the DLLs in release/deploy/bin into your path (or just copy them to coopy's bin directory).

========================================================================

Compiling optional gnumeric dependency for OSX.

Homebrew has most dependencies at this point:
  http://mxcl.github.com/homebrew/
a formula for gnumeric and coopy lives here:
  https://github.com/paulfitz/homebrew/tree/coopy
