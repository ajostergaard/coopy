/**
 *
  
@page spec_hilite Specification of the highlighter diff format

The highlighter diff format is a format for expressing the 
difference between two spreadsheets.  
A highlighter diff is designed to be represented in a
spreadsheet format, using "common denominator" features
of Excel, OpenOffice/LibreOffice, Gnumeric, etc.
A highlighter diff can however be represented in any tabular format
with ordered columns and rows.  It is a simple format, 
easy to parse, yet expressive enough to capture an important
set of possible differences.
It is intended for spreadsheets containing data, rather then
spreadsheets with formulae, charts, and the like.
Highlighter diffs deal with cell content, not formatting.

@section spec_hilite_single Single sheet case, with no schema changes

Assume we are comparing two versions of a 
sheet/table, L and R (for Left/Local
and Right/Remote).  L is the "reference" sheet, and we
describe the difference between it and R in terms of operations
needed to change L into R.  The difference is described
in a "diff sheet" that looks like this:

@load broken_bridges.csv
@load bridges.csv
@diff broken_bridges.csv bridges.csv bridge_report.xls hilite 
@show bridge_report.xls

A diff sheet consists of a single action column and a block 
of data columns, as follows.

@section spec_hilite_tag Action column

The diff sheet has a column called the "action" column.  
The action column is the first column that does not contain
integers; generally it will be exactly the first column.  
Here are cell values that can appear in this column:

@table actiontag
"@","the header tag marks a header row, if one exists."
"+++","the insert tag marks an added row (relative to L)."
"---","the delete tag marks a removed row (relative to L)."
"->","the update tag marks a row in which at least one cell changed.\n-->, --->, ----> etc. have the same meaning."
"Blank","A blank string or NULL signals a row of context."
"...","the skip tag signals that unchanges rows are being skipped."
"!","The schema tag signals a change in the sheet structure."
@endtable

@section spec_hilite_data Data columns

The columns after the action column are called the data columns.
Each column in L and each column in R map onto a data column.
If the diff contains no schema row ("!"), then
there are no schema changes between L and R, and the data columns
map straightforwardly onto columns in L and R.  Here is what the
data columns contain, for each action tag:

@table actiontag
"@","cells contain column names."
"+++","cells are copied from R."
"---","cells are copied from L."
"->","unchanged cells are copied from either L or R.\n modified cells are shown as compound values, ""Vl->Vr"""
"Blank","unchanged cells copied from either L or R."
"...","cells are filled with ""..."""
"!","Let's not deal with this one yet."
@endtable

The meaning of insert and delete are straightforward.  In insert, the
data columns are copied from R, and in delete, the data columns are
copied from R. For updates, data columns that are common to L and R
are filled with that common value.  Data columns that differ are
filled with a "compound value".

@section spec_hilite_compound Compound values

When a cell in L and R differs, we need to show both values (call them
Vl and Vr) in a single cell without introducing ambiguity.  We keep this 
a simple as possible, as follows.
For data where the substring "->" will not occur, and there
are no ambiguities in the string representation of values, compounds
are simple:

\code
compound(Vl,Vr) = string(Vl) + "->" + string(Vr)
\endcode

So we can get (the string representation of) Vl and Vr by splitting
the compound value at "->". 
But in general, "->" might occur in data.  We optimize ease of interpretation
of the diff (rather than ease of producing it), by requiring that 
the update action tag be chosen to avoid collision with the data
(either per row or over the entire sheet, at the discretion of the
implementor).
So the rule becomes:

\code
compound(Vl,Vr) = string(Vl) + action_tag + string(Vr)
\endcode

So as before we can get (the string representation of) Vl and Vr by
splitting the compound value at occurance of the action_tag.

@section spec_hilite_string String representation of values

The string representations of Vl and Vr in compound values
require some care, in the case of data that contains NULL values
and for which NULLs and blank strings are distinct.
If the diff contains any string ending in "NULL" then "NULL-quoting"
is in effect, and any such string should be interpreted as follows:

@table nulls
STRING,VALUE
"""NULL""","This string represents a NULL value"
"""_NULL""","This represents the string ""NULL"""
"""__NULL""","This represents the string ""_NULL"""
...,...
@endtable

When possible, NULL values may be represented in the diff directly
through empty cells, rather than as strings.

@section spec_hilite_multiple Multiple sheet case, with no schema changes

Easy!  Just the same as we've done so far, repeated,
with appropriate sheet names.  For example:

@load directory/directory_alice.sqlite
@diff directory.sqlite directory_alice.sqlite out.xls hilite
@show out.xls

@section spec_hilite_schema_changes Schema changes?

Not yet nailed down, stub at \ref spec_hilite_schema.

@section spec_hilite_row_order Row order?

This diff format isn't capable of usefully representing reordering of
rows.  This is deliberate.  Obvious modifications that do deal with
order are complex.  It seems better to simply limit the scope of the format
and see how useful it works out to be.

@section spec_hilite_implementation Implementations

The COOPY toolbox can generate highlighter diffs, apply them as patches,
and convert them to other patch formats (such as SQL and tdiff).
See: \ref tutorial_hilite.  Using COOPY, highlighter diffs can be
read in C++, Ruby (via wrappers), and Python (via wrappers).  
It would be great to see native implementations for reading and writing
highlighter diffs in various languages and (crucially) spreadsheet 
plugins.

 *
 */

