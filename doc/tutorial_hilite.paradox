/**
 *

@page tutorial_hilite Applying hilite diffs using sspatch

The COOPY toolbox can report the difference between tables in
a few difference formats, one of which is called the "hilite" format.
If someone sends you such a report, what can you do with it?

@section tutorial_hilite_example How to recognize a hilite diff

A good clue that you are looking at a hilite diff is if you see
annotations like "+++", "---", or "->" in the first column of one
or more tables in a spreadsheet.  Here is such a table:

@diff bridge_broken bridge hilite

@section tutorial_hilite_what What is a hilite diff

A hilite diff shows the differences between two versions
of a spreadsheet.  It says what should be done to the first
version of the spreadsheet to produce the second - by adding
rows, removing rows, changing cell values, etc.  The diff
does not generally show all of the original spreadsheet, just
parts that have changed and their immediate surroundings.

@section tutorial_hilite_action Applying changes from a hilite diff

Hilite diffs can be quickly skimmed to understand the
scope of proposed changes.  Hilite diffs can be applied 
to a variety of database and spreadsheet formats using
the sspatch program available in the COOPY toolbox.
Suppose we have received the hilite diff as "diff.xls".
We can do any of:

\verbatim
sspatch --inplace my_table.xlsx diff.xls
sspatch --inplace my_table.ods diff.xls
sspatch --inplace my_table.gnumeric diff.xls
sspatch --inplace my_table.csv diff.xls
sspatch --inplace my_table.sqlite diff.xls
sspatch --inplace dbi:mysql:my_database:username=root diff.xls
...
\endverbatim

See \ref sspatch documentation for options.

@section tutorial_hilite_partial Applying just some changes

Delete any rows from the diff that you don't want (or set the first column
to empty).  Then \ref tutorial_hilite_action "apply as normal".

@section tutorial_hilite_convert Converting to another format

A hilite diff can be converted to other formats, using \ref ssrediff.  
Here's an SQL translation of the \ref tutorial_hilite_example "above example":

\verbatim
@rediff bridge_broken bridge hilite sql
\endverbatim

(produced with <tt>ssrediff --format sql diff.xls</tt>).

Here's a translation to TDIFF, the preferred format for the COOPY 
toolbox:
\verbatim
@rediff bridge_broken bridge hilite tdiff
\endverbatim

(produced with <tt>ssrediff --format tdiff diff.xls</tt>).

Here's a translation to "ROWOPS" format, a simple tabular representation
of changes this can be useful if you don't have to worry about NULLs.

@rediff bridge_broken bridge hilite ops

(produced with <tt>ssrediff --format ops diff.xls</tt>).

There is a more elaborate tabular representation (<tt>--format csv</tt>)
that deals with NULLs, schema changes, etc. but is less easy to read.

@section tutorial_hilite_language Accessing diffs programmatically

The programs in the COOPY toolbox are a thin wrapper around a library
written in C++ that can be accessed from other languages.  See the
top level BUILD.txt file of the source code.  Currently Python and Ruby
are supported.  For example, this code in python:

\include bridge.py

Will produce:

\verbatim
Row change of type 'context'
* condition: bridge = Brooklyn
* condition: designer = J. A. Roebling
* condition: length = 1595

Row change of type 'insert'
* value: bridge -> Manhattan
* value: designer -> G. Lindenthal
* value: length -> 1470

Row change of type 'update'
* condition: bridge = Williamsburg
* condition: designer = D. Duck
* condition: length = 1600
* value: designer -> L. L. Buck

Row change of type 'delete'
* condition: bridge = Spamspan
* condition: designer = S. Spamington
* condition: length = 10000
\endverbatim

The equivalent code in Ruby is:

\include bridge.rb

 *
 */

