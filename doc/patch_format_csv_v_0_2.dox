/**
 *

@page patch_format_csv_v_0_2 CSV patch format

\version 0.2

This page describes the CSV patch format generated by
"ssdiff --format-csv".  This format is easier to parse than
the \ref patch_format_human "human-readable patch format".
In fact it is quite straightforward to read and write by hand too,
if one is careful to produce a valid CSV file (it is important
to have the same number of columns on all lines).

\section patch_format_csv_v_0_2_general General structure

A file consists of a series of lines in CSV format:
\verbatim
cell00,cell01,cell02
cell10,cell11,cell12
cell20,cell21,cell22
\endverbatim

Here's an actual example:
\verbatim
dtbl,csv,version,0.2,,,
config,empty_tag,*,,,,
config,row_tag,ROW,,,,
column,name,ROW,[0],[1],,
column,move,ROW,[1],[0],,
column,insert,ROW,[1],[0],{4},
column,insert,ROW,{3},[1],[0],{4}
column,delete,ROW,{3},[0],{4},
row,select,*,*,three,*,
row,update,*,yo,*,*,
\endverbatim

Since the CSV format has some variability, here are some notes
on the variant expected.  In summary, keep to
<a href="http://tools.ietf.org/html/rfc4180">RFC4180</a> as closely
as you can.
\li If a cell begins with a double quote, the extent of the cell is
determined by quoting rules.  It is important to note that a cell
may extend across line boundaries. The cell will extend to the next
unpaired double quote in the patch.  A pair of double quotes ("")
found by scanning forwards through the file is interpreted as the
double quote character, and not used to delimit the cell's
extent. Once the extent of a cell is determined, if a double quote is
present at the beginnning of that cell, it is stripped, along with the
matching quote at the end.
\li Otherwise, a cell extends until a comma, CR, or LF character, or
the end of the file.
\li An unquoted CRLF sequence is treated as a single delimiter.
\li Cells should be quoted if they contain any whitespace or the 
comma character.

The width of the patch in cells has no significance.  Extra empty 
columns can be added to the end of rows without affecting the 
interpretation of the patch.

\section patch_format_csv_v_0_2_first_block First row

The first row contains at least four non-empty cells.
\li The first cell of the first row should have the value "dtbl" (a
four-character string).  The representation of that value may
be quoted or unquoted.  
\li The second cell of the first row should have the value "csv" (a
three-character string).  The representation of that value may
be quoted or unquoted.
\li The third cell of the first row should have the value "version" (a
seven-character string).  The representation of that value may
be quoted or unquoted.
\li The fourth cell of the first row may have any value non-empty value.  
The representation of that value may be quoted or unquoted.

This means that a CSV format patch file will begin with one of 
the following seqence of bytes (ascii/utf8 encoding):
\li dtbl,csv,...
\li "dtbl","csv",...
\li "dtbl",csv,...
\li dtbl,"csv"...

Here's an example of a first row:
\verbatim
dtbl,csv,version,0.2,,,
\endverbatim

\section patch_format_csv_v_0_2_config_blocks Config rows

The first row may be followed by a series of rows whose first cells
have the value "config".  The second and third cells on such 
rows are interpreted as key-value pairs.  The values of keys
may affect the interpretation of the rest of the patch.
For example:

\verbatim
config,empty_tag,*,,,,
config,row_tag,ROW,,,,
\endverbatim

\section patch_format_csv_v_0_2_remaining_blocks Remaining Rows

The remaining rows describe properties and transformations of
a table.  Transformations assume that the rows are considered
in order from the beginning of the file to the end.

The values of the first and second cells may be:
 \li \ref patch_format_csv_v_0_2_original_column_names
 \li \ref patch_format_csv_v_0_2_insert_column
 \li \ref patch_format_csv_v_0_2_delete_column
 \li \ref patch_format_csv_v_0_2_move_column
 \li \ref patch_format_csv_v_0_2_insert_row
 \li \ref patch_format_csv_v_0_2_delete_row
 \li \ref patch_format_csv_v_0_2_select_row
 \li \ref patch_format_csv_v_0_2_update_row


\section patch_format_csv_v_0_2_original_column_names column name

This gives arbitrary labels for the columns in the table.  The labels
are those used to refer to the columns within the patch file.  The 
first label is special, referring to a row identifier rather than
a column.  Trailing blank cells are ignored:  For example:
\verbatim
column,name,ROW,[0],[1],,
\endverbatim
This specifies that two columns are expected, and those columns are
labeled "[0]" and "[1]".  Rows are identified by the label "ROW".

\section patch_format_csv_v_0_2_move_column column move

This row specifies the movement of a single column.  The move is
specified by giving the resultant order after the move.  For 
example:

\verbatim
column,name,ROW,[0],[1],,
column,move,ROW,[1],[0],,
\endverbatim

\section patch_format_csv_v_0_2_insert_column column insert

This row specifies the insertion of a single column.  It has the 
same format as a "column move" row.  The point of insertion
is specified by giving the resulting column order, with a new column
label inserted appropriately.  Example:
\verbatim
column,name,ROW,[0],[1],,
column,insert,ROW,[0],{4},[1],
\endverbatim

\section patch_format_csv_v_0_2_delete_column delete column

This row specifies the removal of a single column.  It has the 
same format as the "column move" row.  The point of insertion
is specified by giving the resulting column order, with the
unwanted column removed. Example:
\verbatim
column,name,ROW,{3},[1],[0],{4}
column,delete,ROW,{3},[0],{4},
\endverbatim

\section patch_format_csv_v_0_2_insert_row row insert

Inserts a row with the given values.  If not preceeded by 
a \ref patch_format_csv_v_0_2_select_row, the insertion is done 
after the last existing row.  Values are specified as for
\ref patch_format_csv_v_0_2_update_row.

\section patch_format_csv_v_0_2_delete_row row delete

Deletes a row matching the given values.  Values are specified as for
\ref patch_format_csv_v_0_2_select_row.

\section patch_format_csv_v_0_2_select_row row select

Selects a row matching the given values.  This example selects
a row whose first column is "Paul":

\verbatim
column,name,ROW,first,last,age
row,select,*,Paul,*,*,
\endverbatim

\section patch_format_csv_v_0_2_update_row row update

Modifies the values of the row selected using 
\ref patch_format_csv_v_0_2_select_row. Here's an example which
would change a row whose first column contains "Paul" such
that the second column becomes "Fitzpatrick".

\verbatim
column,name,ROW,first,last,age
row,select,*,Paul,*,*,
row,update,*,*,Fitzpatrick,*,
\endverbatim

 *
 */
