
#include <coopy/PolyBook.h>
#include <coopy/JsonProperty.h>
#include <coopy/ShortTextBook.h>

#include <fstream>

using namespace std;
using namespace coopy::store;

#cmakedefine USE_NONE

#ifndef USE_NONE
#cmakedefine USE_GNUMERIC
#cmakedefine USE_REMOTE_SQL
#cmakedefine USE_ACCESS
#endif

#ifdef USE_GNUMERIC
#include <coopy/GnumericTextBookFactory.h>
#endif

#ifdef USE_ACCESS
#include <coopy/AccessTextBook.h>
#endif

#include <json/json.h>

#ifdef USE_REMOTE_SQL
#include <coopy/RemoteSqlTextBook.h>
#endif

#include <coopy/SqliteTextBook.h>

void getFactories(vector<TextBookFactory *>& lst,bool preview) {
#ifdef USE_GNUMERIC
  if (preview) {
    printf(".xls,.xlsx, and other Excel/Openoffice files (via Gnumeric)\n");
  } else {
    lst.push_back(new GnumericTextBookFactory());
  }
#endif  
#ifdef USE_ACCESS
  if (preview) {
    printf(".mdb and other Access files (via Mdbtools)\n");
  } else {
    lst.push_back(new AccessTextBookFactory());
  }
#endif  
#ifdef USE_REMOTE_SQL
  if (preview) {
    printf("mysql databases (use a .json file to specify a database)\n");
  } else {
    lst.push_back(new RemoteSqlTextBookFactory("mysql"));
  }
#endif
}

TextBook *readHelper(const char *fname,
		     const char *ext,
		     const char *data) {
  dbg_printf("Trying plugin data formats...\n");
  TextBook *result = NULL;
  if (string(ext)==".json") {
    dbg_printf("Trying with JSON...\n");
    Property p;
    if (!JsonProperty::add(p,fname)) return NULL;
    DataBook *book = NULL;
    string key = p.get("type",PolyValue::makeString("none")).asString();
    if (key=="mysql") {
#ifdef USE_REMOTE_SQL
      book = new RemoteSqlTextBook();
#endif
    } else if (key=="csv") {
      book = new ShortTextBook();
    } else if (key=="sqlite") {
      dbg_printf("Trying sqlite\n");
      book = new SqliteTextBook();
    } else {
      fprintf(stderr,"Type not recognized: %s\n", key.c_str());
      return NULL;
    }
    if (book!=NULL) {
      if (!book->open(p)) {
	fprintf(stderr,"Failed to read data source\n");
	delete book;
      } else {
	result = book;
	return result;
      }
    }  
  }
#ifdef USE_GNUMERIC
  /*
  dbg_printf("Trying with Gnumeric...\n");
  GnumericTextBookFactory fact;
  if (fact.check(fname,ext,data)) {
    result = fact.load(fname);
  }
  if (result!=NULL) {
    dbg_printf("Got a Gnumeric-readable file\n");
    return result;
  } else {
    dbg_printf("Not a Gnumeric-readable file\n");
  }
  */
#endif
  return result;
}

