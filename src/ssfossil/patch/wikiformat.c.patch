--- original/src/wikiformat.c	2010-09-18 23:35:29.000000000 -0400
+++ fossil/src/wikiformat.c	2010-08-26 21:41:03.000000000 -0400
@@ -37,6 +37,13 @@
 #define WIKI_NOBLOCK        0x008  /* No block markup of any kind */
 #endif
 
+static int sheet_mode = 0;
+static int sheet_token = 0;
+static int sheet_ref = 0;
+static Blob sheet_blob = BLOB_INITIALIZER;
+
+int csv_render(Blob *in, Blob *out);
+
 
 /*
 ** These are the only markup attributes allowed.
@@ -145,8 +152,6 @@
   return 0;
 }
 
-
-
 /*
 ** Allowed markup.
 **
@@ -190,20 +195,21 @@
 #define MARKUP_PRE              32
 #define MARKUP_S                33
 #define MARKUP_SAMP             34
-#define MARKUP_SMALL            35
-#define MARKUP_STRIKE           36
-#define MARKUP_STRONG           37
-#define MARKUP_SUB              38
-#define MARKUP_SUP              39
-#define MARKUP_TABLE            40
-#define MARKUP_TD               41
-#define MARKUP_TH               42
-#define MARKUP_TR               43
-#define MARKUP_TT               44
-#define MARKUP_U                45
-#define MARKUP_UL               46
-#define MARKUP_VAR              47
-#define MARKUP_VERBATIM         48
+#define MARKUP_SHEET            35
+#define MARKUP_SMALL            36
+#define MARKUP_STRIKE           37
+#define MARKUP_STRONG           38
+#define MARKUP_SUB              39
+#define MARKUP_SUP              40
+#define MARKUP_TABLE            41
+#define MARKUP_TD               42
+#define MARKUP_TH               43
+#define MARKUP_TR               44
+#define MARKUP_TT               45
+#define MARKUP_U                46
+#define MARKUP_UL               47
+#define MARKUP_VAR              48
+#define MARKUP_VERBATIM         49
 
 /*
 ** The various markup is divided into the following types:
@@ -277,6 +283,7 @@
  { "pre",           MARKUP_PRE,          MUTYPE_BLOCK,         0  },
  { "s",             MARKUP_S,            MUTYPE_FONT,          0  },
  { "samp",          MARKUP_SAMP,         MUTYPE_FONT,          0  },
+ { "sheet",         MARKUP_SHEET,        MUTYPE_BLOCK,         0  },
  { "small",         MARKUP_SMALL,        MUTYPE_FONT,          0  },
  { "strike",        MARKUP_STRIKE,       MUTYPE_FONT,          0  },
  { "strong",        MARKUP_STRONG,       MUTYPE_FONT,          0  },
@@ -1094,6 +1101,31 @@
       n = nextWikiToken(z, p, &tokenType);
     }
     p->state &= ~(AT_NEWLINE|AT_PARAGRAPH);
+
+    if (sheet_mode && tokenType!=TOKEN_MARKUP) {
+      int i;
+      if (sheet_token==0) {
+	for (i=0; i<n; i++) {
+	  char ch = z[i];
+	  if (ch=='!') {
+	    sheet_ref = 1;
+	    break;
+	  }
+	  if (ch!='\n'&&ch!='\r'&&ch!=' '&&ch!='\t') {
+	    break;
+	  }
+	}
+      }
+      if (sheet_ref) {
+	if (sheet_token==0) {
+	  blob_append(&sheet_blob, z+i+1, n-i-1);
+	  blob_trim(&sheet_blob);
+	}
+      } else {
+	blob_append(&sheet_blob, z, n);
+      }
+      sheet_token++;
+    } else
     switch( tokenType ){
       case TOKEN_PARAGRAPH: {
         if( inlineOnly ){
@@ -1307,6 +1339,52 @@
           /* Do nothing */
         }else
 
+        if( markup.iCode==MARKUP_SHEET ){
+	  p->wantAutoParagraph = 0;
+	  sheet_mode = !markup.endTag;
+	  if (sheet_mode) {
+	    sheet_token = 0;
+	    sheet_ref = 0;
+	    blob_reset(&sheet_blob);
+	  } else {
+	    if (sheet_ref) {
+	      Manifest m;
+	      Blob content;
+	      int rid = 0;
+	      char *uuid = NULL;
+	      if((rid = name_to_rid("trunk"))!=0 && content_get(rid, &content)){
+		if( !manifest_parse(&m, &content) || m.type!=CFTYPE_MANIFEST ){
+		  rid = 0;
+		}
+	      }
+	      if (rid!=0) {
+		int i;
+		for(i=0; i<m.nFile; i++){
+		  if (strlen(m.aFile[i].zName)==blob_size(&sheet_blob)) {
+		    if (strncmp(m.aFile[i].zName,
+				blob_buffer(&sheet_blob),
+				blob_size(&sheet_blob))==0) {
+		      uuid = m.aFile[i].zUuid;
+		    }
+		  }
+		}
+	      }
+	      rid = 0;
+	      if (uuid!=0) {
+		rid = name_to_rid(uuid);
+	      }
+	      if (rid!=0) {
+		content_get(rid, &sheet_blob);
+	      }
+	    }
+	    if (csv_render(&sheet_blob,p->pOut)==0) {
+	      blob_append(p->pOut, blob_buffer(&sheet_blob), 
+			  blob_size(&sheet_blob));
+	    }
+	    blob_reset(&sheet_blob);
+	  }
+        }else
+
         /* Generate end-tags */
         if( markup.endTag ){
           popStackToTag(p, markup.iCode);
